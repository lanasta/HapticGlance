float twopi = 3.14159 * 2;
int sampleInt = 80;
elapsedMicros usec = 0;

float samples[] {0, 0.10394775, 0.205601561, 0.303866711, 0.397698051, 0.486111111, 0.568192411, 0.643108861, 0.710116167, 0.768566145, 0.817912881, 0.85771768, 0.887652749, 0.907503607, 0.917170192, 0.916666667, 0.906119949, 0.885766994, 0.855950865, 0.817115659, 0.769800359, 0.714631678, 0.652316013, 0.583630584, 0.509413885, 0.430555556, 0.347985795, 0.262664445, 0.175569872, 0.087687766, 1.02E-16, -0.086526339, -0.170949612, -0.252363879, -0.32990861, -0.402777778, -0.470228202, -0.531587093, -0.586258696, -0.633729979, -0.673575314, -0.705460103, -0.729143329, -0.744479007, -0.751416543, -0.75, -0.7403663, -0.722742394, -0.697441445, -0.664858083, -0.625462792, -0.579795513, -0.528458543, -0.472108817, -0.411449677, -0.347222222, -0.280196354, -0.211161613, -0.140917924, -0.070266356, -1.63E-16, 0.069104928, 0.136297664, 0.200861046, 0.26211917, 0.319444444, 0.372263993, 0.420065325, 0.462401225, 0.498893813, 0.529237747, 0.553202527, 0.57063391, 0.581454407, 0.585662894, 0.583333333, 0.574612651, 0.559717794, 0.538932026, 0.512600507, 0.481125224, 0.444959347, 0.404601072, 0.360587049, 0.313485468, 0.263888889, 0.212406914, 0.15965878, 0.106265975, 0.052844945, 1.84E-16, -0.051683518, -0.101645716, -0.149358214, -0.194329729, -0.236111111, -0.274299784, -0.308543557, -0.338543754, -0.364057647, -0.384900179, -0.400944951, -0.41212449, -0.418429807, -0.419909245, -0.416666667, -0.408859001, -0.396693194, -0.380422607, -0.360342931, -0.336787657, -0.310123181, -0.280743601, -0.249065281, -0.215521259, -0.180555556, -0.144617473, -0.108155948, -0.071614027, -0.035423535, -1.63E-16, 0.034262107, 0.066993767, 0.097855382, 0.126540289, 0.152777778, 0.176335576, 0.19702179, 0.214686283, 0.229221482, 0.240562612, 0.248687375, 0.253615071, 0.255405207, 0.254155595, 0.25, 0.243105352, 0.233668594, 0.221913187, 0.208085354, 0.19245009, 0.175287015, 0.15688613, 0.137543514, 0.11755705, 0.097222222, 0.076828033, 0.056653116, 0.036962078, 0.018002124, 1.02E-16, -0.016840697, -0.032341819, -0.046352549, -0.058750848, -0.069444444, -0.078371367, -0.085500022, -0.090828812, -0.094385316, -0.096225045, -0.096429798, -0.095105652, -0.092380607, -0.088401946, -0.083333333, -0.077351703, -0.070643993, -0.063403768, -0.055827778, -0.048112522, -0.04045085, -0.033028659, -0.026021746, -0.019592842, -0.013888889, -0.009038592, -0.005150283, -0.00231013, -0.000580714};
float BOsample[] {0, 0.104528463267653, 0.207911690817759, 0.309016994374947, 0.406736643075800, 0.500000000000000, 0.587785252292473, 0.669130606358858, 0.743144825477394, 0.809016994374948, 0.866025403784439, 0.913545457642601, 0.951056516295154, 0.978147600733806, 0.994521895368273, 1, 0.994521895368273, 0.978147600733806, 0.951056516295154, 0.913545457642601, 0.866025403784439, 0.809016994374948, 0.743144825477394, 0.669130606358858, 0.587785252292473, 0.500000000000000, 0.406736643075800, 0.309016994374948, 0.207911690817759, 0.104528463267654, 1.22464679914735e-16, -0.104528463267654, -0.207911690817760, -0.309016994374947, -0.406736643075800, -0.500000000000000, -0.587785252292473, -0.669130606358858, -0.743144825477394, -0.809016994374947, -0.866025403784439, -0.913545457642601, -0.951056516295154, -0.978147600733806, -0.994521895368273, -1, -0.994521895368273, -0.978147600733806, -0.951056516295154, -0.913545457642601, -0.866025403784439, -0.809016994374948, -0.743144825477395, -0.669130606358858, -0.587785252292473, -0.500000000000000, -0.406736643075800, -0.309016994374948, -0.207911690817760, -0.104528463267653, 0};

int phase = 0;
int BO_phase = 0;
boolean play = false;
boolean playBO = false;
int BO_TimeOut = 5000;

int gain = 512;
int offset = 512;

void setup() {
  analogWriteResolution(10);
}

void loop()
{
  if (Serial.available())
  {
    char inChar = (char)Serial.read();
    Serial.println(inChar);
    
    if (inChar == 'a')  // Grain vibration
    {
      usec = 0;
      play = true;
      phase = 0;
    }
    else if (inChar == 'b') // Bottom out
    {
      usec = 0;
      playBO = true;
      phase = 0;
    }
    else if (inChar == 'p')
    {
      gain =  gain + 100;
      Serial.println(gain);
    }
    else if (inChar == 'l')
    {
      gain =  gain - 100;
      Serial.println(gain);
    }
    else if (inChar == 'o')
    {
      offset =  offset + 100;
      Serial.println(offset);
    }
    else if (inChar == 'k')
    {
      offset =  offset - 100;
      Serial.println(offset);
    }
  }
  if (play)
  {
    if (usec > sampleInt)
    {
      analogWrite(A21, (int)(samples[phase] * gain + offset));
      usec = 0;
      if (phase < 180)
      {
        phase ++;
      }
      else
      {
        play = false;
        phase = 0;
      }
    }
  }
  if(playBO)
  {
    if (usec > BO_TimeOut)
    {
      usec = 0;
      switch(BO_phase)
      {
        case 0:
          analogWrite(A21, (int)(1 * gain + offset));
          BO_phase = 1;
        break;
        case 1:
          analogWrite(A21, (int)(-1 * gain + offset));
          BO_phase = 2;
        break;
        case 2:
          analogWrite(A21, (int)(1 * gain + offset));
          BO_phase = 3;
        break;
        case 3:
          analogWrite(A21, (int)(-1 * gain + offset));
          BO_phase = 4;
        break;        
        case 4:
          analogWrite(A21, (int)(offset));
          BO_phase = 0;
          playBO = false;
        break;
      }
    }
  }  
}